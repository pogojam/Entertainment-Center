{"ast":null,"code":"var Socket = require('./socket');\n\nvar IOStream = require('./iostream');\n\nvar BlobReadStream = require('./blob-read-stream');\n\nexports = module.exports = lookup;\n/**\n * Expose Node Buffer for browser.\n *\n * @api public\n */\n\nexports.Buffer = Buffer;\n/**\n * Expose Socket constructor.\n *\n * @api public\n */\n\nexports.Socket = Socket;\n/**\n * Expose IOStream constructor.\n *\n * @api public\n */\n\nexports.IOStream = IOStream;\n/**\n * Forces base 64 encoding when emitting. Must be set to true for Socket.IO v0.9 or lower.\n *\n * @api public\n */\n\nexports.forceBase64 = false;\n/**\n * Look up an existing Socket.\n *\n * @param {socket.io#Socket} socket.io\n * @param {Object} options\n * @return {Socket} Socket instance\n * @api public\n */\n\nfunction lookup(sio, options) {\n  options = options || {};\n\n  if (null == options.forceBase64) {\n    options.forceBase64 = exports.forceBase64;\n  }\n\n  if (!sio._streamSocket) {\n    sio._streamSocket = new Socket(sio, options);\n  }\n\n  return sio._streamSocket;\n}\n/**\n * Creates a new duplex stream.\n *\n * @param {Object} options\n * @return {IOStream} duplex stream\n * @api public\n */\n\n\nexports.createStream = function (options) {\n  return new IOStream(options);\n};\n/**\n * Creates a new readable stream for Blob/File on browser.\n *\n * @param {Blob} blob\n * @param {Object} options\n * @return {BlobReadStream} stream\n * @api public\n */\n\n\nexports.createBlobReadStream = function (blob, options) {\n  return new BlobReadStream(blob, options);\n};","map":null,"metadata":{},"sourceType":"script"}