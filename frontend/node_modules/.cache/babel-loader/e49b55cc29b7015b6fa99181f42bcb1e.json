{"ast":null,"code":"import _slicedToArray from \"/Users/ryanbreaux/Projects/Web/Personal/homeApp/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/Users/ryanbreaux/Projects/Web/Personal/homeApp/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/ryanbreaux/Projects/Web/Personal/homeApp/frontend/src/pages/movies.js\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  {\\n    getMovies {\\n      Title\\n      Rated\\n      Year\\n      Awards\\n      Plot\\n      Poster\\n    }\\n  }\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState } from \"react\";\nimport { Upload, VideoPlayer } from \"../components/upload\";\nimport { Box, Flex, Button, Card, Heading, Text } from \"rebass\";\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nimport { useSpring, animated } from \"react-spring\";\nimport ImageFilter from \"react-image-filter\";\nconst queryMovies = gql(_templateObject()); // const queryCategories = gql`\n//   getCategories{\n//   }\n// `;\n\nconst MoviePreview = ({\n  playMovie,\n  data\n}) => {\n  const Poster = data.Poster,\n        Title = data.Title;\n\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        inspect = _useState2[0],\n        toggleInspect = _useState2[1];\n\n  const handleClick = () => toggleInspect(!inspect);\n\n  const props = useSpring({\n    size: 1,\n    from: {\n      size: 3\n    }\n  });\n  const Background = animated(ImageFilter);\n  return React.createElement(Card, {\n    style: {\n      height: \"100%\",\n      color: \"white\",\n      position: \"relative\",\n      overflow: \"hidden\",\n      display: \"flex\",\n      flexDirection: \"column\"\n    },\n    borderRadius: \"3px\",\n    maxWidth: \"20vw\",\n    onClick: handleClick,\n    className: \"animated fadeIn\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, React.createElement(Background, {\n    style: {\n      position: \"absolute\",\n      top: 0,\n      left: 0,\n      height: \"100%\",\n      zIndex: \"-1\",\n      transform: \"scale(\".concat(props.size, \")\")\n    },\n    preserveAspectRatio: \"cover\",\n    image: Poster,\n    filter: \"duotone\",\n    colorOne: [0, 0, 0],\n    colorTwo: [255, 255, 255],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }), React.createElement(Heading, {\n    fontSize: [5],\n    py: \"3em\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, Title), inspect && React.createElement(MainPreview, Object.assign({}, data, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  })));\n};\n\nconst MainPreview = ({\n  img,\n  Year,\n  Plot,\n  Poster,\n  Awards,\n  Title\n}) => {\n  return React.createElement(Flex, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, React.createElement(Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, Year), React.createElement(Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, Poster), React.createElement(Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, Plot), React.createElement(Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, Awards), React.createElement(Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, Title), React.createElement(\"image\", {\n    src: img,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }));\n};\n\nconst Slider = ({\n  togglePlayer,\n  categories\n}) => {\n  const handleClick = () => togglePlayer(true);\n\n  const _useQuery = useQuery(queryMovies),\n        loading = _useQuery.loading,\n        error = _useQuery.error,\n        data = _useQuery.data.getMovies;\n\n  !loading && console.log(data, error);\n  return React.createElement(Box, {\n    bg: \"#fd0101\",\n    my: \"5em\",\n    p: \".5em\",\n    style: {\n      height: \"40vh\"\n    },\n    width: \"100%\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, React.createElement(Heading, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, categories), !loading && data.map(e => React.createElement(MoviePreview, {\n    key: e.Title,\n    data: e,\n    playMovie: handleClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  })));\n};\n\nexport default function Movies() {\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        upload = _useState4[0],\n        toggleUpload = _useState4[1];\n\n  const _useState5 = useState(false),\n        _useState6 = _slicedToArray(_useState5, 2),\n        player = _useState6[0],\n        togglePlayer = _useState6[1]; // const {loading,error,data}  = useQuery(queryCategories)\n\n\n  const data = [{\n    categories: \"dfs\"\n  }];\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, data.map(({\n    categories\n  }) => {\n    return React.createElement(Slider, {\n      key: categories,\n      togglePlayer: togglePlayer,\n      name: categories,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    });\n  }), React.createElement(Button, {\n    bg: \"#000000\",\n    color: \"#22ce99\",\n    onClick: () => toggleUpload(!upload),\n    style: {\n      position: \"absolute\",\n      bottom: \"0\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }, \" \", \"Contribute\"), player && React.createElement(VideoPlayer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }), upload && React.createElement(Upload, {\n    toggle: toggleUpload,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }));\n}","map":{"version":3,"sources":["/Users/ryanbreaux/Projects/Web/Personal/homeApp/frontend/src/pages/movies.js"],"names":["React","useState","Upload","VideoPlayer","Box","Flex","Button","Card","Heading","Text","useQuery","useMutation","gql","useSpring","animated","ImageFilter","queryMovies","MoviePreview","playMovie","data","Poster","Title","inspect","toggleInspect","handleClick","props","size","from","Background","height","color","position","overflow","display","flexDirection","top","left","zIndex","transform","MainPreview","img","Year","Plot","Awards","Slider","togglePlayer","categories","loading","error","getMovies","console","log","map","e","Movies","upload","toggleUpload","player","bottom"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,MAAT,EAAiBC,WAAjB,QAAoC,sBAApC;AACA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,MAApB,EAA4BC,IAA5B,EAAkCC,OAAlC,EAA2CC,IAA3C,QAAuD,QAAvD;AACA,SAASC,QAAT,EAAmBC,WAAnB,QAAsC,qBAAtC;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,cAApC;AACA,OAAOC,WAAP,MAAwB,oBAAxB;AAEA,MAAMC,WAAW,GAAGJ,GAAH,mBAAjB,C,CAaA;AACA;AAEA;AACA;;AAEA,MAAMK,YAAY,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAAD,KAAyB;AAAA,QACpCC,MADoC,GAClBD,IADkB,CACpCC,MADoC;AAAA,QAC5BC,KAD4B,GAClBF,IADkB,CAC5BE,KAD4B;;AAAA,oBAGXpB,QAAQ,CAAC,KAAD,CAHG;AAAA;AAAA,QAGrCqB,OAHqC;AAAA,QAG5BC,aAH4B;;AAI5C,QAAMC,WAAW,GAAG,MAAMD,aAAa,CAAC,CAACD,OAAF,CAAvC;;AAEA,QAAMG,KAAK,GAAGZ,SAAS,CAAC;AAAEa,IAAAA,IAAI,EAAE,CAAR;AAAWC,IAAAA,IAAI,EAAE;AAAED,MAAAA,IAAI,EAAE;AAAR;AAAjB,GAAD,CAAvB;AAEA,QAAME,UAAU,GAAGd,QAAQ,CAACC,WAAD,CAA3B;AAEA,SACE,oBAAC,IAAD;AACE,IAAA,KAAK,EAAE;AACLc,MAAAA,MAAM,EAAE,MADH;AAELC,MAAAA,KAAK,EAAE,OAFF;AAGLC,MAAAA,QAAQ,EAAE,UAHL;AAILC,MAAAA,QAAQ,EAAE,QAJL;AAKLC,MAAAA,OAAO,EAAE,MALJ;AAMLC,MAAAA,aAAa,EAAE;AANV,KADT;AASE,IAAA,YAAY,EAAC,KATf;AAUE,IAAA,QAAQ,EAAC,MAVX;AAWE,IAAA,OAAO,EAAEV,WAXX;AAYE,IAAA,SAAS,EAAC,iBAZZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAcE,oBAAC,UAAD;AACE,IAAA,KAAK,EAAE;AACLO,MAAAA,QAAQ,EAAE,UADL;AAELI,MAAAA,GAAG,EAAE,CAFA;AAGLC,MAAAA,IAAI,EAAE,CAHD;AAILP,MAAAA,MAAM,EAAE,MAJH;AAKLQ,MAAAA,MAAM,EAAE,IALH;AAMLC,MAAAA,SAAS,kBAAWb,KAAK,CAACC,IAAjB;AANJ,KADT;AASE,IAAA,mBAAmB,EAAC,OATtB;AAUE,IAAA,KAAK,EAAEN,MAVT;AAWE,IAAA,MAAM,EAAE,SAXV;AAYE,IAAA,QAAQ,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAZZ;AAaE,IAAA,QAAQ,EAAE,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAbZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAdF,EA6BE,oBAAC,OAAD;AAAS,IAAA,QAAQ,EAAE,CAAC,CAAD,CAAnB;AAAwB,IAAA,EAAE,EAAC,KAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGC,KADH,CA7BF,EAgCGC,OAAO,IAAI,oBAAC,WAAD,oBAAiBH,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAhCd,CADF;AAoCD,CA9CD;;AAgDA,MAAMoB,WAAW,GAAG,CAAC;AAAEC,EAAAA,GAAF;AAAOC,EAAAA,IAAP;AAAaC,EAAAA,IAAb;AAAmBtB,EAAAA,MAAnB;AAA2BuB,EAAAA,MAA3B;AAAmCtB,EAAAA;AAAnC,CAAD,KAAgD;AAClE,SACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOoB,IAAP,CADF,EAEE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOrB,MAAP,CAFF,EAGE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOsB,IAAP,CAHF,EAIE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOC,MAAP,CAJF,EAKE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOtB,KAAP,CALF,EAME;AAAO,IAAA,GAAG,EAAEmB,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,CADF;AAUD,CAXD;;AAaA,MAAMI,MAAM,GAAG,CAAC;AAAEC,EAAAA,YAAF;AAAgBC,EAAAA;AAAhB,CAAD,KAAkC;AAC/C,QAAMtB,WAAW,GAAG,MAAMqB,YAAY,CAAC,IAAD,CAAtC;;AAD+C,oBAO3CnC,QAAQ,CAACM,WAAD,CAPmC;AAAA,QAI7C+B,OAJ6C,aAI7CA,OAJ6C;AAAA,QAK7CC,KAL6C,aAK7CA,KAL6C;AAAA,QAM1B7B,IAN0B,aAM7CA,IAN6C,CAMrC8B,SANqC;;AAS/C,GAACF,OAAD,IAAYG,OAAO,CAACC,GAAR,CAAYhC,IAAZ,EAAkB6B,KAAlB,CAAZ;AAEA,SACE,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAC,SAAR;AAAkB,IAAA,EAAE,EAAC,KAArB;AAA2B,IAAA,CAAC,EAAC,MAA7B;AAAoC,IAAA,KAAK,EAAE;AAAEnB,MAAAA,MAAM,EAAE;AAAV,KAA3C;AAA+D,IAAA,KAAK,EAAC,MAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAUiB,UAAV,CADF,EAEG,CAACC,OAAD,IACC5B,IAAI,CAACiC,GAAL,CAASC,CAAC,IACR,oBAAC,YAAD;AAAc,IAAA,GAAG,EAAEA,CAAC,CAAChC,KAArB;AAA4B,IAAA,IAAI,EAAEgC,CAAlC;AAAqC,IAAA,SAAS,EAAE7B,WAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAHJ,CADF;AASD,CApBD;;AAsBA,eAAe,SAAS8B,MAAT,GAAkB;AAAA,qBACArD,QAAQ,CAAC,KAAD,CADR;AAAA;AAAA,QACxBsD,MADwB;AAAA,QAChBC,YADgB;;AAAA,qBAEAvD,QAAQ,CAAC,KAAD,CAFR;AAAA;AAAA,QAExBwD,MAFwB;AAAA,QAEhBZ,YAFgB,kBAG/B;;;AAEA,QAAM1B,IAAI,GAAG,CAAC;AAAE2B,IAAAA,UAAU,EAAE;AAAd,GAAD,CAAb;AAEA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG3B,IAAI,CAACiC,GAAL,CAAS,CAAC;AAAEN,IAAAA;AAAF,GAAD,KAAoB;AAC5B,WACE,oBAAC,MAAD;AACE,MAAA,GAAG,EAAEA,UADP;AAEE,MAAA,YAAY,EAAED,YAFhB;AAGE,MAAA,IAAI,EAAEC,UAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAOD,GARA,CADH,EAUE,oBAAC,MAAD;AACE,IAAA,EAAE,EAAC,SADL;AAEE,IAAA,KAAK,EAAC,SAFR;AAGE,IAAA,OAAO,EAAE,MAAMU,YAAY,CAAC,CAACD,MAAF,CAH7B;AAIE,IAAA,KAAK,EAAE;AAAExB,MAAAA,QAAQ,EAAE,UAAZ;AAAwB2B,MAAAA,MAAM,EAAE;AAAhC,KAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMG,GANH,eAVF,EAmBGD,MAAM,IAAI,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAnBb,EAoBGF,MAAM,IAAI,oBAAC,MAAD;AAAQ,IAAA,MAAM,EAAEC,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IApBb,CADF;AAwBD","sourcesContent":["import React, { useState } from \"react\";\nimport { Upload, VideoPlayer } from \"../components/upload\";\nimport { Box, Flex, Button, Card, Heading, Text } from \"rebass\";\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nimport { useSpring, animated } from \"react-spring\";\nimport ImageFilter from \"react-image-filter\";\n\nconst queryMovies = gql`\n  {\n    getMovies {\n      Title\n      Rated\n      Year\n      Awards\n      Plot\n      Poster\n    }\n  }\n`;\n\n// const queryCategories = gql`\n//   getCategories{\n\n//   }\n// `;\n\nconst MoviePreview = ({ playMovie, data }) => {\n  const { Poster, Title } = data;\n\n  const [inspect, toggleInspect] = useState(false);\n  const handleClick = () => toggleInspect(!inspect);\n\n  const props = useSpring({ size: 1, from: { size: 3 } });\n\n  const Background = animated(ImageFilter);\n\n  return (\n    <Card\n      style={{\n        height: \"100%\",\n        color: \"white\",\n        position: \"relative\",\n        overflow: \"hidden\",\n        display: \"flex\",\n        flexDirection: \"column\"\n      }}\n      borderRadius=\"3px\"\n      maxWidth=\"20vw\"\n      onClick={handleClick}\n      className=\"animated fadeIn\"\n    >\n      <Background\n        style={{\n          position: \"absolute\",\n          top: 0,\n          left: 0,\n          height: \"100%\",\n          zIndex: \"-1\",\n          transform: `scale(${props.size})`\n        }}\n        preserveAspectRatio=\"cover\"\n        image={Poster}\n        filter={\"duotone\"}\n        colorOne={[0, 0, 0]}\n        colorTwo={[255, 255, 255]}\n      />\n      <Heading fontSize={[5]} py=\"3em\">\n        {Title}\n      </Heading>\n      {inspect && <MainPreview {...data} />}\n    </Card>\n  );\n};\n\nconst MainPreview = ({ img, Year, Plot, Poster, Awards, Title }) => {\n  return (\n    <Flex>\n      <Text>{Year}</Text>\n      <Text>{Poster}</Text>\n      <Text>{Plot}</Text>\n      <Text>{Awards}</Text>\n      <Text>{Title}</Text>\n      <image src={img} />\n    </Flex>\n  );\n};\n\nconst Slider = ({ togglePlayer, categories }) => {\n  const handleClick = () => togglePlayer(true);\n\n  const {\n    loading,\n    error,\n    data: { getMovies: data }\n  } = useQuery(queryMovies);\n\n  !loading && console.log(data, error);\n\n  return (\n    <Box bg=\"#fd0101\" my=\"5em\" p=\".5em\" style={{ height: \"40vh\" }} width=\"100%\">\n      <Heading>{categories}</Heading>\n      {!loading &&\n        data.map(e => (\n          <MoviePreview key={e.Title} data={e} playMovie={handleClick} />\n        ))}\n    </Box>\n  );\n};\n\nexport default function Movies() {\n  const [upload, toggleUpload] = useState(false);\n  const [player, togglePlayer] = useState(false);\n  // const {loading,error,data}  = useQuery(queryCategories)\n\n  const data = [{ categories: \"dfs\" }];\n\n  return (\n    <div>\n      {data.map(({ categories }) => {\n        return (\n          <Slider\n            key={categories}\n            togglePlayer={togglePlayer}\n            name={categories}\n          />\n        );\n      })}\n      <Button\n        bg=\"#000000\"\n        color=\"#22ce99\"\n        onClick={() => toggleUpload(!upload)}\n        style={{ position: \"absolute\", bottom: \"0\" }}\n      >\n        {\" \"}\n        Contribute\n      </Button>\n      {player && <VideoPlayer />}\n      {upload && <Upload toggle={toggleUpload} />}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}